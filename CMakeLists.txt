cmake_minimum_required(VERSION 2.6.3)

#########################
### Default Release Flags
#########################

SET(CMAKE_CXX_FLAGS_RELEASE "-std=c++1y -fPIC -g0 -O3 -Wall -Wpedantic -Wno-unused-function")

SET(CMAKE_C_FLAGS_RELEASE "-fPIC -g0 -O3 -Wall")

#######################
### Default Debug Flags
#######################

# See https://cmake.org/Wiki/CTest/Coverage

SET( CMAKE_CXX_FLAGS_DEBUG "-std=c++1y -fPIC -g3 -O0 -Wall -W -Wshadow -Wunused-variable -Wunused-parameter -Wunused-function -Wunused -Wno-system-headers -Wno-deprecated -Woverloaded-virtual -Wwrite-strings -Wno-unused-function -fprofile-arcs -ftest-coverage" )

SET (CMAKE_C_FLAGS_DEBUG "-fPIC -g3 -O0 -Wall -W -fprofile-arcs -ftest-coverage")

SET (CMAKE_SHARED_LINKER_FLAGS_DEBUG "-fprofile-arcs -ftest-coverage")

SET (CMAKE_EXE_LINKER_FLAGS_DEBUG "-fprofile-arcs -ftest-coverage")

if(CMAKE_BUILD_TYPE=="DEBUG")
  ## Debug Requirements
  find_library ( HAS_GCOV gcov )

  if(NOT HAS_GCOV)
    message(FATAL_ERROR "gcov library not found")
  endif()
endif()

###############
### Google Test
###############

# Download and unpack googletest at configure time
configure_file(CMakeLists.txt.in googletest-download/CMakeLists.txt)
execute_process(COMMAND ${CMAKE_COMMAND} -G "${CMAKE_GENERATOR}" .
RESULT_VARIABLE result
WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/googletest-download )
if(result)
message(FATAL_ERROR "CMake step for googletest failed: ${result}")
endif()
execute_process(COMMAND ${CMAKE_COMMAND} --build .
RESULT_VARIABLE result
WORKING_DIRECTORY ${CMAKE_BINARY_DIR}/googletest-download )
if(result)
message(FATAL_ERROR "Build step for googletest failed: ${result}")
endif()

# Prevent overriding the parent project's compiler/linker
# settings on Windows
set(gtest_force_shared_crt ON CACHE BOOL "" FORCE)

# Add googletest directly to our build. This defines
# the gtest and gtest_main targets.
add_subdirectory(${CMAKE_BINARY_DIR}/googletest-src
${CMAKE_BINARY_DIR}/googletest-build)

# The gtest/gtest_main targets carry header search path
# dependencies automatically when using CMake 2.8.11 or
# later. Otherwise we have to add them here ourselves.
if (CMAKE_VERSION VERSION_LESS 2.8.11)
include_directories("${gtest_SOURCE_DIR}/include")
endif()

# Now simply link against gtest or gtest_main as needed.
# add_executable(example example.cpp)
# target_link_libraries(example gtest_main)
# add_test(NAME example_test COMMAND example)

##############
### Main Build
##############

## Variables

# Show compiler & linker messages
set ( CMAKE_VERBOSE_MAKEFILE ON )

# Generate a compilation db
set( CMAKE_EXPORT_COMPILE_COMMANDS ON )

## Objects
add_library( zvalue SHARED zvalue.cpp )

#######################
## Testing and Coverage
#######################

# Define helper functions and macros used by Google Test.
include("${CMAKE_BINARY_DIR}/googletest-src/googletest/cmake/internal_utils.cmake")

option(zvalue_build_tests "Build all of zvalues' tests." ON)

if (zvalue_build_tests)
  # This must be set in the root directory for the tests to be run by
  # 'make test' or ctest.
  enable_testing()

  # C++ tests built with standard compiler flags.
  cxx_test(zvalue_all_test gtest_main zvalue)
  target_link_libraries ( zvalue_all_test  gcov )

  cxx_test(zvalue_five_dimensions_test gtest_main zvalue)
  target_link_libraries ( zvalue_five_dimensions_test  gcov )

  # C++ tests built with non-standard compiler flags.
endif()

# According to the documentation for add_dependencies:
#
#     Add a dependency between top-level targets.
#
#     add_dependencies(<target> [<target-dependency>]...)
#
#     Make a top-level <target> depend on other top-level targets to
#     ensure that they build before <target> does. A top-level target
#     is one created by one of the add_executable(), add_library(), or
#     add_custom_target() commands (but not targets generated by CMake
#     like install).
#
# we can't use code like:
#
# add_custom_target(targ1 ...)
# add_dependencies(targ1 test)
#
# Instead, we define the corresponding targets all2, install2, test2,
# etc.

set(ALL2_COMMAND
  ${CMAKE_COMMAND} -E cmake_progress_start
	              ${CMAKE_BINARY_DIR}/CMakeFiles
		      ${CMAKE_BINARY_DIR}/CMakeFiles/progress.marks &&
  # TODO: try to eliminate the following dependency on 'make' so that
  # other build systems may also be used.
  make -f ${CMAKE_BINARY_DIR}/CMakeFiles/Makefile2 all &&
  ${CMAKE_COMMAND} -E cmake_progress_start
                      ${CMAKE_BINARY_DIR}/CMakeFiles 0)

add_custom_target(all2
  COMMAND @$(CMAKE_COMMAND) -E cmake_progress_start ${PROJECT_SOURCE_DIR}/CMakeFiles ${PROJECT_SOURCE_DIR}/CMakeFiles/progress.marks && $(MAKE) -f CMakeFiles/Makefile2 all && $(CMAKE_COMMAND) -E cmake_progress_start ${PROJECT_SOURCE_DIR}/CMakeFiles 0)

add_custom_target(test2
  COMMAND @${CMAKE_COMMAND} -E cmake_echo_color --switch=${COLOR} --cyan "Running tests..." && ctest --force-new-ctest-process ${ARGS})
add_dependencies(test2 all2)

add_custom_target(lcov-view-coverage
  COMMAND lcov --directory ../zvalue --directory ${CMAKE_BINARY_DIR}/CMakeFiles/zvalue_all_test.dir --capture --output-file coverage.lcov --no-external && genhtml coverage.lcov --output-directory lcov-html && firefox lcov-html/index.html &
  DEPENDS ${CMAKE_BINARY_DIR}/CMakeFiles/zvalue_all_test.dir/test/zvalue_all_test.cc.gcda)
add_dependencies(lcov-view-coverage test2)
